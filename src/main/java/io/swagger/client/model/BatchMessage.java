/*
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * SMS Message Batch
 */
@ApiModel(description = "SMS Message Batch")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-13T15:06:56.412+01:00")
public class BatchMessage {
  @SerializedName("sender")
  private String sender = null;

  @SerializedName("destinations")
  private List<String> destinations = new ArrayList<String>();

  @SerializedName("content")
  private String content = null;

  @SerializedName("schedule")
  private String schedule = null;

  @SerializedName("tag")
  private String tag = null;

  @SerializedName("ttl")
  private BigDecimal ttl = null;

  public BatchMessage sender(String sender) {
    this.sender = sender;
    return this;
  }

   /**
   * The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID&#39;s. No spaces or special characters.
   * @return sender
  **/
  @ApiModelProperty(example = "YourCompany", required = true, value = "The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.")
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }

  public BatchMessage destinations(List<String> destinations) {
    this.destinations = destinations;
    return this;
  }

  public BatchMessage addDestinationsItem(String destinationsItem) {
    this.destinations.add(destinationsItem);
    return this;
  }

   /**
   * Telephone numbers of each of the recipients
   * @return destinations
  **/
  @ApiModelProperty(example = "[447777777777,447777777778,447777777779]", required = true, value = "Telephone numbers of each of the recipients")
  public List<String> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<String> destinations) {
    this.destinations = destinations;
  }

  public BatchMessage content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Message to send to the recipient
   * @return content
  **/
  @ApiModelProperty(example = "My super awesome batch message", required = true, value = "Message to send to the recipient")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public BatchMessage schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Date-time at which to send the batch. This is only used by the batch/schedule service.
   * @return schedule
  **/
  @ApiModelProperty(example = "Wed Jul 19 2017 20:26:28 GMT+0100 (BST)", required = true, value = "Date-time at which to send the batch. This is only used by the batch/schedule service.")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }

  public BatchMessage tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * An identifying label for the message, which you can use to filter and report on messages you&#39;ve sent later. Ideal for campaigns.
   * @return tag
  **/
  @ApiModelProperty(example = "SummerSpecial", value = "An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns.")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public BatchMessage ttl(BigDecimal ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * The number of minutes before the message is deleted. Optional. Omit to prevent delivery report deletion.
   * @return ttl
  **/
  @ApiModelProperty(example = "10.0", value = "The number of minutes before the message is deleted. Optional. Omit to prevent delivery report deletion.")
  public BigDecimal getTtl() {
    return ttl;
  }

  public void setTtl(BigDecimal ttl) {
    this.ttl = ttl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchMessage batchMessage = (BatchMessage) o;
    return Objects.equals(this.sender, batchMessage.sender) &&
        Objects.equals(this.destinations, batchMessage.destinations) &&
        Objects.equals(this.content, batchMessage.content) &&
        Objects.equals(this.schedule, batchMessage.schedule) &&
        Objects.equals(this.tag, batchMessage.tag) &&
        Objects.equals(this.ttl, batchMessage.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sender, destinations, content, schedule, tag, ttl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchMessage {\n");
    
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

