/*
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * Contact: support@thesmsworks.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response schema for the /otp/send method
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-15T11:27:24.989260Z[Europe/London]")
public class OTPResponse {
  public static final String SERIALIZED_NAME_MESSAGEID = "messageid";
  @SerializedName(SERIALIZED_NAME_MESSAGEID)
  private String messageid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private BigDecimal credits;

  public static final String SERIALIZED_NAME_CREDITS_USED = "creditsUsed";
  @SerializedName(SERIALIZED_NAME_CREDITS_USED)
  private BigDecimal creditsUsed;

  public static final String SERIALIZED_NAME_MESSAGEPARTS = "messageparts";
  @SerializedName(SERIALIZED_NAME_MESSAGEPARTS)
  private BigDecimal messageparts;

  public OTPResponse() {
  }

  public OTPResponse messageid(String messageid) {
    
    this.messageid = messageid;
    return this;
  }

   /**
   * The messageid of the SMS used to send the OTP. Save this in your application to use when verifying passcodes.
   * @return messageid
  **/
  @javax.annotation.Nullable
  public String getMessageid() {
    return messageid;
  }


  public void setMessageid(String messageid) {
    this.messageid = messageid;
  }


  public OTPResponse status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The initial status of the OTP message.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public OTPResponse credits(BigDecimal credits) {
    
    this.credits = credits;
    return this;
  }

   /**
   * The credit balance on your account
   * @return credits
  **/
  @javax.annotation.Nullable
  public BigDecimal getCredits() {
    return credits;
  }


  public void setCredits(BigDecimal credits) {
    this.credits = credits;
  }


  public OTPResponse creditsUsed(BigDecimal creditsUsed) {
    
    this.creditsUsed = creditsUsed;
    return this;
  }

   /**
   * The number of credits used to send this message
   * @return creditsUsed
  **/
  @javax.annotation.Nullable
  public BigDecimal getCreditsUsed() {
    return creditsUsed;
  }


  public void setCreditsUsed(BigDecimal creditsUsed) {
    this.creditsUsed = creditsUsed;
  }


  public OTPResponse messageparts(BigDecimal messageparts) {
    
    this.messageparts = messageparts;
    return this;
  }

   /**
   * The number of message parts used to send this message
   * @return messageparts
  **/
  @javax.annotation.Nullable
  public BigDecimal getMessageparts() {
    return messageparts;
  }


  public void setMessageparts(BigDecimal messageparts) {
    this.messageparts = messageparts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OTPResponse otPResponse = (OTPResponse) o;
    return Objects.equals(this.messageid, otPResponse.messageid) &&
        Objects.equals(this.status, otPResponse.status) &&
        Objects.equals(this.credits, otPResponse.credits) &&
        Objects.equals(this.creditsUsed, otPResponse.creditsUsed) &&
        Objects.equals(this.messageparts, otPResponse.messageparts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageid, status, credits, creditsUsed, messageparts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OTPResponse {\n");
    sb.append("    messageid: ").append(toIndentedString(messageid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    creditsUsed: ").append(toIndentedString(creditsUsed)).append("\n");
    sb.append("    messageparts: ").append(toIndentedString(messageparts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageid");
    openapiFields.add("status");
    openapiFields.add("credits");
    openapiFields.add("creditsUsed");
    openapiFields.add("messageparts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OTPResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OTPResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OTPResponse is not found in the empty JSON string", OTPResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OTPResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OTPResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("messageid") != null && !jsonObj.get("messageid").isJsonNull()) && !jsonObj.get("messageid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OTPResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OTPResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OTPResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OTPResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OTPResponse>() {
           @Override
           public void write(JsonWriter out, OTPResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OTPResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OTPResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OTPResponse
  * @throws IOException if the JSON string is invalid with respect to OTPResponse
  */
  public static OTPResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OTPResponse.class);
  }

 /**
  * Convert an instance of OTPResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

