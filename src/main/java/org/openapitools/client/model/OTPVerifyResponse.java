/*
 * The SMS Works API
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response schema for the /otp/verify method
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-14T11:38:52.349531+01:00[Europe/London]")
public class OTPVerifyResponse {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PASSCODE = "passcode";
  @SerializedName(SERIALIZED_NAME_PASSCODE)
  private BigDecimal passcode;

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private BigDecimal validity;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private String expires;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private String modified;

  public OTPVerifyResponse() {
  }

  public OTPVerifyResponse destination(String destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * The mobile number that the OTP was sent to
   * @return destination
  **/
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }


  public void setDestination(String destination) {
    this.destination = destination;
  }


  public OTPVerifyResponse status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the OTP. If the passcode is used within the validity period then this will be &#39;VERIFIED&#39;, otherwise it will be &#39;EXPIRED&#39;
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public OTPVerifyResponse passcode(BigDecimal passcode) {
    
    this.passcode = passcode;
    return this;
  }

   /**
   * The passcode used.
   * @return passcode
  **/
  @javax.annotation.Nullable
  public BigDecimal getPasscode() {
    return passcode;
  }


  public void setPasscode(BigDecimal passcode) {
    this.passcode = passcode;
  }


  public OTPVerifyResponse validity(BigDecimal validity) {
    
    this.validity = validity;
    return this;
  }

   /**
   * The length of time in seconds for which the generated passcode is valid.
   * @return validity
  **/
  @javax.annotation.Nullable
  public BigDecimal getValidity() {
    return validity;
  }


  public void setValidity(BigDecimal validity) {
    this.validity = validity;
  }


  public OTPVerifyResponse metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * A JSON object storing data supplied when this passcode was generated, for use in your application.
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public OTPVerifyResponse created(String created) {
    
    this.created = created;
    return this;
  }

   /**
   * The ISO 8601 date/time at which this OTP was created
   * @return created
  **/
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }


  public void setCreated(String created) {
    this.created = created;
  }


  public OTPVerifyResponse expires(String expires) {
    
    this.expires = expires;
    return this;
  }

   /**
   * The ISO 8601 date/time at which this OTP expires
   * @return expires
  **/
  @javax.annotation.Nullable
  public String getExpires() {
    return expires;
  }


  public void setExpires(String expires) {
    this.expires = expires;
  }


  public OTPVerifyResponse modified(String modified) {
    
    this.modified = modified;
    return this;
  }

   /**
   * The ISO 8601 date/time at which this OTP was modified (typically when it was verified)
   * @return modified
  **/
  @javax.annotation.Nullable
  public String getModified() {
    return modified;
  }


  public void setModified(String modified) {
    this.modified = modified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OTPVerifyResponse otPVerifyResponse = (OTPVerifyResponse) o;
    return Objects.equals(this.destination, otPVerifyResponse.destination) &&
        Objects.equals(this.status, otPVerifyResponse.status) &&
        Objects.equals(this.passcode, otPVerifyResponse.passcode) &&
        Objects.equals(this.validity, otPVerifyResponse.validity) &&
        Objects.equals(this.metadata, otPVerifyResponse.metadata) &&
        Objects.equals(this.created, otPVerifyResponse.created) &&
        Objects.equals(this.expires, otPVerifyResponse.expires) &&
        Objects.equals(this.modified, otPVerifyResponse.modified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, status, passcode, validity, metadata, created, expires, modified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OTPVerifyResponse {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    passcode: ").append(toIndentedString(passcode)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("status");
    openapiFields.add("passcode");
    openapiFields.add("validity");
    openapiFields.add("metadata");
    openapiFields.add("created");
    openapiFields.add("expires");
    openapiFields.add("modified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OTPVerifyResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OTPVerifyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OTPVerifyResponse is not found in the empty JSON string", OTPVerifyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OTPVerifyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OTPVerifyResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("expires") != null && !jsonObj.get("expires").isJsonNull()) && !jsonObj.get("expires").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires").toString()));
      }
      if ((jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) && !jsonObj.get("modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OTPVerifyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OTPVerifyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OTPVerifyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OTPVerifyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OTPVerifyResponse>() {
           @Override
           public void write(JsonWriter out, OTPVerifyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OTPVerifyResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OTPVerifyResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OTPVerifyResponse
  * @throws IOException if the JSON string is invalid with respect to OTPVerifyResponse
  */
  public static OTPVerifyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OTPVerifyResponse.class);
  }

 /**
  * Convert an instance of OTPVerifyResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

